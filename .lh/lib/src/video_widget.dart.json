{
    "sourceFile": "lib/src/video_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1657315300295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1657315300295,
            "name": "Commit-0",
            "content": "part of native_video_view;\n\n/// Callback that is called when the view is created and ready.\ntypedef ViewCreatedCallback = void Function(VideoViewController controller);\n\n/// Callback that is called when the playback of a video is completed.\ntypedef CompletionCallback = void Function(VideoViewController controller);\n\n/// Callback that is called when the player had an error trying to load/play\n/// the video source. The values [what] and [extra] are Android exclusives and\n/// [message] is iOS exclusive.\ntypedef ErrorCallback = void Function(\n    VideoViewController controller, int what, int extra, String? message);\n\n/// Callback that is called when the player finished loading the video\n/// source and is prepared to start the playback. The [controller]\n/// and [videoInfo] is given as parameters when the function is called.\n/// The [videoInfo] parameter contains info related to the file loaded.\ntypedef PreparedCallback = void Function(\n    VideoViewController controller, VideoInfo videoInfo);\n\n/// Callback that indicates the progression of the media being played.\ntypedef ProgressionCallback = void Function(int elapsedTime, int duration);\n\n/// Callback that indicates that the volume has been changed using the\n/// media controller.\ntypedef VolumeChangedCallback = void Function(double volume);\n\n/// Widget that displays a video player.\n/// This widget calls an underlying player in the\n/// respective platform, [VideoView] in Android and\n/// [AVPlayer] in iOS.\nclass NativeVideoView extends StatefulWidget {\n  /// Wraps the [PlatformView] in an [AspectRatio]\n  /// to resize the widget once the video is loaded.\n  final bool? keepAspectRatio;\n\n  /// Shows a default media controller to control the player state.\n  final bool? showMediaController;\n\n  /// Forces the use of ExoPlayer instead of the native VideoView.\n  ///\n  /// Only in Android.\n  final bool? useExoPlayer;\n\n  /// Determines if the controller should hide automatically.\n  final bool? autoHide;\n\n  /// The time after which the controller will automatically hide.\n  final Duration? autoHideTime;\n\n  /// Enables the drag gesture over the video to control the volume.\n  ///\n  /// Default value is false.\n  final bool? enableVolumeControl;\n\n  /// Instance of [ViewCreatedCallback] to notify\n  /// when the view is finished creating.\n  final ViewCreatedCallback onCreated;\n\n  /// Instance of [CompletionCallback] to notify\n  /// when a video has finished playing.\n  final CompletionCallback onCompletion;\n\n  /// Instance of [ErrorCallback] to notify\n  /// when the player had an error loading the video source.\n  final ErrorCallback? onError;\n\n  /// Instance of [ProgressionCallback] to notify\n  /// when the time progresses while playing.\n  final ProgressionCallback? onProgress;\n\n  /// Instance of [PreparedCallback] to notify\n  /// when the player is ready to start the playback of a video.\n  final PreparedCallback onPrepared;\n\n  /// Constructor of the widget.\n  const NativeVideoView({\n    Key? key,\n    this.keepAspectRatio,\n    this.showMediaController,\n    this.useExoPlayer,\n    this.autoHide,\n    this.autoHideTime,\n    this.enableVolumeControl,\n    required this.onCreated,\n    required this.onPrepared,\n    required this.onCompletion,\n    this.onError,\n    this.onProgress,\n  }) : super(key: key);\n\n  @override\n  _NativeVideoViewState createState() => _NativeVideoViewState();\n}\n\n/// State of the video widget.\nclass _NativeVideoViewState extends State<NativeVideoView> {\n  /// Completer that is finished when [onPlatformViewCreated]\n  /// is called and the controller created.\n  final Completer<VideoViewController> _controller =\n      Completer<VideoViewController>();\n\n  /// Value of the aspect ratio. Changes depending of the\n  /// loaded file.\n  double _aspectRatio = 4 / 3;\n\n  /// Controller of the MediaController widget. This is used\n  /// to update the.\n  _MediaControlsController? _mediaController;\n\n  List<String>? languajes;\n\n  @override\n  void initState() {\n    super.initState();\n    _mediaController = _MediaControlsController();\n  }\n\n  /// Disposes the state and remove the temp files created\n  /// by the Widget.\n  @override\n  void dispose() {\n    _disposeController();\n    super.dispose();\n  }\n\n  /// Builds the view based on the platform that runs the app.\n  @override\n  Widget build(BuildContext context) {\n    final Map<String, dynamic> creationParams = <String, dynamic>{\n      'useExoPlayer': widget.useExoPlayer ?? false,\n    };\n    if (defaultTargetPlatform == TargetPlatform.android) {\n      return _buildVideoView(\n          child: AndroidView(\n        viewType: 'native_video_view',\n        onPlatformViewCreated: onPlatformViewCreated,\n        creationParams: creationParams,\n        creationParamsCodec: const StandardMessageCodec(),\n      ));\n    } else if (defaultTargetPlatform == TargetPlatform.iOS) {\n      return _buildVideoView(\n        child: UiKitView(\n          viewType: 'native_video_view',\n          onPlatformViewCreated: onPlatformViewCreated,\n          creationParams: creationParams,\n          creationParamsCodec: const StandardMessageCodec(),\n        ),\n      );\n    }\n    return Text('$defaultTargetPlatform is not yet supported by this plugin.');\n  }\n\n  /// Builds the video view depending of the configuration.\n  Widget _buildVideoView({required Widget child}) {\n    bool keepAspectRatio = widget.keepAspectRatio ?? false;\n    bool showMediaController = widget.showMediaController ?? false;\n    Widget videoView = keepAspectRatio\n        ? AspectRatio(\n            child: child,\n            aspectRatio: _aspectRatio,\n          )\n        : child;\n    return showMediaController\n        ? _MediaController(\n            child: videoView,\n            controller: _mediaController,\n            autoHide: widget.autoHide,\n            autoHideTime: widget.autoHideTime,\n            enableVolumeControl: widget.enableVolumeControl,\n            onControlPressed: _onControlPressed,\n            onPositionChanged: _onPositionChanged,\n            onVolumeChanged: _onVolumeChanged,\n          )\n        : videoView;\n  }\n\n  /// Callback that is called when the view is created in the platform.\n  Future<void> onPlatformViewCreated(int id) async {\n    final VideoViewController controller =\n        await VideoViewController.init(id, this);\n    _controller.complete(controller);\n    widget.onCreated(controller);\n  }\n\n  /// Disposes the controller of the player.\n  void _disposeController() async {\n    final controller = await _controller.future;\n    controller.dispose();\n  }\n\n  /// Function that is called when the platform notifies that the video has\n  /// finished playing.\n  /// This function calls the widget's [CompletionCallback] instance.\n  void onCompletion(VideoViewController controller) {\n    widget.onCompletion(controller);\n  }\n\n  /// Notifies when an action of the player (play, pause & stop) must be\n  /// reflected by the media controller view.\n  void notifyControlChanged(_MediaControl mediaControl) {\n    if (_mediaController != null)\n      _mediaController!.notifyControlPressed(mediaControl);\n  }\n\n  /// Notifies the player position to the media controller view.\n  void notifyPlayerPosition(int position, int duration) {\n    if (_mediaController != null)\n      _mediaController!.notifyPositionChanged(position, duration);\n  }\n\n  /// Function that is called when the platform notifies that an error has\n  /// occurred during the video source loading.\n  /// This function calls the widget's [ErrorCallback] instance.\n  void onError(\n      VideoViewController controller, int what, int extra, String? message) {\n    if (widget.onError != null)\n      widget.onError!(controller, what, extra, message);\n  }\n\n  /// Function that is called when the platform notifies that the video\n  /// source has been loaded and is ready to start playing.\n  /// This function calls the widget's [PreparedCallback] instance.\n  void onPrepared(VideoViewController controller, VideoInfo videoInfo) {\n    setState(() {\n      _aspectRatio = videoInfo.aspectRatio;\n    });\n    notifyPlayerPosition(0, videoInfo.duration ?? 0);\n    widget.onPrepared(controller, videoInfo);\n  }\n\n  /// Function that is called when the player updates the time played.\n  void onProgress(int position, int duration) {\n    if (widget.onProgress != null) widget.onProgress!(position, duration);\n    notifyPlayerPosition(position, duration);\n  }\n\n  /// When a control is pressed in the media controller, the actions are\n  /// realized by the [VideoViewController] and then the result is returned\n  /// to the media controller to update the view.\n  void _onControlPressed(_MediaControl mediaControl) async {\n    VideoViewController controller = await _controller.future;\n    switch (mediaControl) {\n      case _MediaControl.pause:\n        controller.pause();\n        break;\n      case _MediaControl.play:\n        controller.play();\n        break;\n      case _MediaControl.stop:\n        controller.stop();\n        break;\n      case _MediaControl.fwd:\n        int? duration = controller.videoFile?.info?.duration;\n        int position = await controller.currentPosition();\n        if (duration != null && position != -1) {\n          int newPosition =\n              position + 3000 > duration ? duration : position + 3000;\n          controller.seekTo(newPosition);\n          notifyPlayerPosition(newPosition, duration);\n        }\n        break;\n      case _MediaControl.rwd:\n        int? duration = controller.videoFile?.info?.duration;\n        int position = await controller.currentPosition();\n        if (duration != null && position != -1) {\n          int newPosition = position - 3000 < 0 ? 0 : position - 3000;\n          controller.seekTo(newPosition);\n          notifyPlayerPosition(newPosition, duration);\n        }\n        break;\n      case _MediaControl.toggleSound:\n        controller.toggleSound();\n        break;\n    }\n  }\n\n  /// When the position is changed in the media controller, the action is\n  /// realized by the [VideoViewController] to change the position of\n  /// the video playback.\n  void _onPositionChanged(int position, int? duration) async {\n    VideoViewController controller = await _controller.future;\n    controller.seekTo(position);\n  }\n\n  /// When the position is changed in the media controller, the action is\n  /// realized by the [VideoViewController] to change the position of\n  /// the video playback.\n  void _onVolumeChanged(double volume) async {\n    VideoViewController controller = await _controller.future;\n    controller.setVolume(volume);\n  }\n}\n"
        }
    ]
}